doczytac 
https://blog.trifork.com/2010/01/13/migrating-content-with-spring-integration-a-real-life-example/ 
i dodac router, transformer, xpath



na podstaiwe:
https://samerabdelkafi.wordpress.com/2011/08/01/spring-integration/
https://blog.trifork.com/2010/01/13/migrating-content-with-spring-integration-a-real-life-example/
https://docs.spring.io/spring-integration/docs/2.0.0.RC1/reference/html/xml.html


_______________________________
how to run:
http://localhost:8080/h2-console
Make sure that you use jdbc:h2:mem:testdb as JDBC URL.



/home/rafal/sts-devel-projekty/spring_boot_db_adapter
mvn test
mvn package -- buduje jara do katalogu target
mvn -Dmaven.test.skip=true package - pomija testy -jak nie pominie to wysypuje sie na testach i nie zbuduje paczki

-------------------------------------------


to_do:
-- wczytany jest plik i transformer file-to-string. uzyc jego, albo file-to-byte i dopisac transfrmater - unamrshaller i zapis do bazy
https://docs.spring.io/spring-integration/docs/2.0.0.RC1/reference/html/xml.html
<si-xml:unmarshalling-transformer id="defaultUnmarshaller"
    input-channel="input"
    output-channel="output"
  https://blog.trifork.com/2010/01/13/migrating-content-with-spring-integration-a-real-life-example/  unmarshaller="unmarshaller"/>


-rest api - demo
-rest api - każda metoda zeby zwracala response json. teraz POST nic nie zwraca.
-dodac si. splitter i kazda linie osobno przetwarzac
-spring security 
https://kobietydokodu.pl/16-zabezpieczanie-aplikacji-z-uzyciem-spring-security/
http://www.baeldung.com/securing-a-restful-web-service-with-spring-security
http://www.baeldung.com/spring-security-custom-filter
https://spring.io/guides/gs/securing-web/
https://stackoverflow.com/questions/19825946/how-to-add-a-filter-class-in-spring-boot

-jpa

next:
-activity



--xsd jaxb generowanie
mvn jaxb2:xjc
http://www.mojohaus.org/jaxb2-maven-plugin/Documentation/v2.2/example_xjc_basic.html
https://memorynotfound.com/generate-java-classes-from-xsd/
https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Plugins



-----
--jdbc h2
https://www.mkyong.com/spring/spring-embedded-database-examples/
https://docs.spring.io/spring-boot/docs/current/reference/html/howto-database-initialization.html
https://books.google.pl/books?id=9pY3DwAAQBAJ&pg=PA58&lpg=PA58&dq=spring+boot++hsqldb&source=bl&ots=b3edfu6ySo&sig=tak2xGjcaXZ9_Mv8Zm70an205VU&hl=pl&sa=X&ved=0ahUKEwj24b_7zvjZAhVEGZoKHb2NBuk4HhDoAQgmMAA#v=onepage&q=spring%20boot%20%20hsqldb&f=false
h2:
http://www.springboottutorial.com/spring-boot-and-spring-jdbc-with-h2



--testy integracyjne /jdbcTemplate
https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-testing.html
https://spring.io/guides/gs/relational-data-access/


-- adapter jdbc
http://www.javarticles.com/2015/05/spring-integration-jdbc-inbound-adapter.html
https://docs.spring.io/spring-integration/reference/html/jdbc.html
https://stackoverflow.com/questions/28349222/spring-integration-outbound-channel-adapter-and-database-persistence

https://samerabdelkafi.wordpress.com/2011/08/01/spring-integration/


--spring integration gateway
https://springframework.guru/testing-spring-integration-gateways/
http://www.javarticles.com/2015/05/spring-integration-gateway-example.html
This component can be used to directly connect your business logic to the Spring Integration Context. 
Basically you define a Java Interface that has a method that accepts a parameter of the type of the object you wish to place on a channel.

So is there a way we can decouple the application code from the messaging APIs? Gateway comes to our rescue. 
It encapsulates access to the messaging system from the rest of the application

A gateway can be used to eliminate this coupling by creating a façade layer that abstracts away the functionality of the messaging system into a discrete interface.
Notice in the above code, I never provided a concrete implementation of the Gateway interface. This is something that Spring Integration will do for you at run time. 
Once I have the ProductGateway  from the Spring context


--spring integration file channel
http://www.javarticles.com/2015/05/spring-integration-file-adapter-example.html
https://github.com/michaelisvy/spring-integration-samples/blob/master/src/main/java/example3/file-channel-adapter-transformer-config.xml


--spring integration payload message
- payload to dowolny obiekt
https://dzone.com/articles/message-processing-spring
--message:
	
Message: is a data structure that will have payload and the header. The payload can be a file, String, JMS message … 
The header is a key-value map that contains some properties that will be used by the framework or user values.
https://samerabdelkafi.wordpress.com/2011/08/01/spring-integration/

--spring DI
https://www.petrikainulainen.net/software-development/design/why-i-changed-my-mind-about-field-injection/

--rest
http://www.baeldung.com/building-a-restful-web-service-with-spring-and-java-based-configuration
https://spring.io/guides/gs/rest-service/
